name: CI Cache and Build
on: 
  push:  {branches: [main, dev] }
  pull_request:
  workflow_dispatch: {}
jobs:
  cache:
    name: Cache LFS files 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform:
          - Android
          - iOS
    steps:
      # checkout 
      - name: checkout code
        uses: actions/checkout@v2
        with:
          clean: true
          fetch-depth: 1
          lfs: true
      
      # cache git LFS to avoid using large bandwidth with each checkout step
      # action 1: create a file listing hashes of tracked LFS files
      - name: create LFS file list 
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      # action 2: run hashFiles on the generated list to determine which files to pull
      - name: restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with: 
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1 
      # action 3: pull the necessary LFS files - invalidated if files added/removed from LFS
      - name: git LFS pull 
        run: git lfs pull

      # cache library folder from previous build to cut down build time
      - name: cache library folder
        uses: actions/cache@v2
        with: 
          path: test-client/Library # abra-client/Library/
          key: Library-TestProject-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-client-
            Library-
  buildWithLinux:
    name: Build Project ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: cache
    strategy:
      matrix:
        unityVersion: 
          - 2020.3.13f1
        targetPlatform:
          - Android # Build android .apk
          - iOS # Build iOS player
    steps: 
      # checkout 
      - name: checkout code
        uses: actions/checkout@v2
        with:
          lfs: true   
      # build Android APK and iOS Xcode project
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: test-client/ # abra-client/
      # upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}      
      
  # uploadArtifactToAppCenter:
  #   name: Upload Build to App Center
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # upload APK artifact to AppCenter
  #     - name: Upload APK to AppCenter
  #       uses: wzieba/AppCenter-Github-Action@v1
  #       with:
  #         appName: com.talofa-games.Abra-Android
  #         token: ${{secrets.APP_CENTER_TOKEN}}
  #         group: orgs/Talofa-Games/apps/R2MH-dev/
  #         file: build/Android
  #         notifyTesters: true
  #         debug: false    
      # upload IPA to AppCenter
      # - name: Upload IPA to AppCenter
      #   uses: wzieba/AppCenter-Github-Action@v1
      #   with:
      #     appName: com.talofa-games.Abra-iOS
      #     token: ${{ secrets.APP_CENTER_TOKEN }}
      #     group: orgs/Talofa-Games/apps/R2MH-dev-1/
      #     file: build/iOS
      #     notifyTests: true
      #     debug: false

      # test
      #- name: Run tests
      #  uses: game-ci/unity-test-runner@v2
      #  env:
      #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #  with:
      #    projectPath: client/TestProject/
      #    githubToken: ${{ secrets.ACCESS_TOKEN_GITHUB }}

      # free disk space to prevent VM from running out of memory
      # - name: free disk space
      #   run: |
      #     swapoff -a 
      #     rm -f /swapfile
      #     apt clean
      #     docker rmi $(docker image ls -aq)
      #     df -h

      
